Hello there!

I want to :

Write on the screen
-------------------------------
Depending on what style of text you'll want to use these 5 commands on WQ

+(void) print:(NSString*)string, ...;
+(void) say:(NSString*)name words:(NSString*)words;
+(void) heading:(NSString*)string;
+(void) command:(NSString*)string;
+(void) title:(NSString*)string;

e.g. 
[WQ say:@"orta" words:@"hello there"];
[WQ print:@"looks like you picked up %i shoes", shoesCount];
[WQ heading:@"and so the story ends"];


Find out what room I'm in 
---
You want to get access to the shared WibbleQuest object, and then call currentRoom on it

[WibbleQuest sharedWibble].currentRoom


Create a room
--------------------------------
Room * openingRoom = [[Room alloc] init];
openingRoom.id = @"start";
openingRoom.name = @"Backstage, at the venue.";
openingRoom.description = @"There are clothes all over the floor, and you can hear people practicing through the southern door.";
[wq addRoom:openingRoom];


Make a room do something when you enter it
--------------------------------
Make a room subclass, in it you can the override which will let you act when they leave / join

-(void)playerDidEnterRoom{}
-(void)playerDidLeaveRoom{}

If you want to control whether they can leave or join a room, you can override

-(BOOL)playerShouldEnterRoom;
-(BOOL)playerShouldLeaveRoom;

which expect a bool as to whether you can move out or in. These do not say anything so that's left to the room to deal with informing the player why.


Give a room an Command
-------------------------------
Say you have a switch in your room, you can add commands by overriding didRespondToCommand: (this is the same way that Items/People/Creatures/Stores can do it! )

-(BOOL)didRespondToCommand:(NSArray*)commandArray {
  NSString * command = [commandArray first];
  if ([@"play" isEqualToString:command]) {
    [WQ print:@"You rock out on the Keytar for a while playing some George Michaels, no one seems to pay any attention though"];
    return YES;
  }
  return NO;
}


Move to another room
-------------------------------

You can use teleport to room with ID, make sure to have done [wq addRoom: room] and that the room has an id and everything should be fine

[Player teleportToRoomWithID:@"magicroom"];

Add a Person to talk to in a room
-------------------------------
Create the person's class, as a subclass of Person
Make them respond to words that are said by using 

-(void)respondToSentenceArray:(NSArray*)sentence {
  if([sentence contains:@"hi", @"hello", nil] ){
    [WQ print:@"Doc says, Oh wow, glad you've arrived!"];
    return;
  }
}


make a person give you something
-------------------------------
You can just add an item to the players inventory for example like below

if([sentence contains:@"mic", @"mics", @"microphone", @"microphones", nil] ){
  [WQ say:@"FloatstarPX" words:@"Ah yeah, the microphones, I spotted them earlier, here you go"];
  Microphone *mic = [[Microphone alloc] init];
  WibbleQuest * wibble = [WibbleQuest sharedWibble];
  [wibble.inventory addItem: mic];
  
  return;
}


Make it posible to examine things in the room
--
You need to subclass the Room object and add the method dictionaryForExamine. For example, this one says something if you write "examine clothes" in the room.

-(NSDictionary*)dictionaryForExamine {
return [NSDictionary dictionaryWithObjectsAndKeys:
@"The pile of clothes are covered in sweat, you don't really want to touch it", @"clothes",
nil];
}


Make an item that you can pick up in a room
---------------------------------
Create an Item subclass, add it to a room's inventory, it can have multiple items.
 
Room * bathroom = [[Room alloc] init];
bathroom.name = @"Bathroom"; 
Keytar *keytar = [[Keytar alloc] init];
[bathroom addItem:keytar];  



Make an item do something when picked up
---------------------------------
override onPickup in your class

-(void) onPickup{
  [WQ print:@"Bubba sloshes as you pick up his weighty cylindrical self"];
}


Allow the player to use an object
--
override the method and that will be called when the player does "use [item]"
-(void)onUse{}



Make an item do a custom command
---------------------------------
You want the Item to override did respond to command. In this example it looks to see if the command is play and if it is, it says something. We the  return YES, otherwise it will continue to look for other commands.

-(BOOL)didRespondToCommand:(NSArray*)commandArray {
  NSString * command = [commandArray first];
  if ([@"play" isEqualToString:command]) {
    [WQ print:@"You rock out on the Keytar for a while playing some George Michaels, no one seems to pay any attention though"];
    return YES;
  }
  return NO;
}



Make a person that you can talk to
-------------------------------
Create a subclass of Person, make them respond using the following method

-(void)respondToSentenceArray:(NSArray*)sentence;

you can use the helpful method array contains to allow people to dig deeply into the conversation tree, or to allow them to react to multiple words with the same speech.


Make a person say Hello the first time you enter a room
-------------------------------
In your person subclass override 
-(void)playerEntersSameRoom {}
and make it say something


Create something to fight
-------------------------------
First you need to have your player have some health, and a damageRange. I add this to my ready function.

Player * player = [Player sharedPlayer];
player.damageRange = NSMakeRange(1, 3);
player.maxHealth = 10;
player.health = 10;

A fightable character is a subclass of a Creature, they have name, damageRange, and Max Health variables that are self explanatory. 

What is less obvious is that you can do lots with what the creature says and how you attack it. There is a handy method called damageModifier which allows you to modify the damage after it's been rolled. For example, in this case the damage is doubled if the user has picked up a keytar.


-(int)damageTakenModifier:(int)originalDamage {
  // if the player has a keytar, then double the damage
  if([Player has:@"keytar"]){
    return originalDamage * 2;
  }
  return originalDamage;
}


There is a lot of methods you can override in order to get your creatures to be realistic, override as many as you want.

-(void)beforeTurn;
-(void)afterTurn;
-(void)beforeFight;
-(void)afterFightLost;
-(void)afterFightWon;

Once you're happy with your class, you just need to add the creature to a room to make everything connect up.